generator client {
  provider = "prisma-client-js"
}

datasource db {
  url      = env("DB_URL")
  provider = "postgresql"
}

model WorkTime {
  weekDay  Int
  fromHour Int
  fromMins Int
  tillHour Int
  tillMins Int

  Office   Office @relation(fields: [officeId], references: [id])
  officeId String
  ATM      ATM    @relation(fields: [atmId], references: [id])
  atmId    String

  @@id([officeId, atmId, weekDay])
}

model Inclusion {
  id   String @id @default(uuid())
  name String

  officesInclusions OfficeInclusion[]
  atmInclusions     ATMInclusion[]
}

model OfficeInclusion {
  officeId    String
  office      Office    @relation(fields: [officeId], references: [id])
  inclusionId String
  inclusion   Inclusion @relation(fields: [inclusionId], references: [id])

  @@id([officeId, inclusionId])
}

model ATMInclusion {
  atmId       String
  atm         ATM       @relation(fields: [atmId], references: [id])
  inclusionId String
  inclusion   Inclusion @relation(fields: [inclusionId], references: [id])

  @@id([atmId, inclusionId])
}

model Service {
  id   String @id @default(uuid())
  name String

  officesServices OfficeService[]
  atmServices     ATMService[]
  tickets         Queue[]
}

model OfficeService {
  officeId  String
  office    Office  @relation(fields: [officeId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([officeId, serviceId])
}

model ATMService {
  atmId     String
  atm       ATM     @relation(fields: [atmId], references: [id])
  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([atmId, serviceId])
}

model Office {
  id String @id @default(uuid())

  latitude     Decimal
  longitude    Decimal
  name         String
  address      String
  metroStation String?
  openTime     WorkTime[]
  services     OfficeService[]
  inclusions   OfficeInclusion[]
  Queue        Queue[]
}

model ATM {
  id String @id @default(uuid())

  latitude     Decimal
  longitude    Decimal
  name         String
  address      String
  metroStation String?
  openTime     WorkTime[]
  services     ATMService[]
  inclusions   ATMInclusion[]
}

enum TicketStatus {
  PENDING
  FINISHED
}

// в условиях хакатона нужно как-то отделять "свой" тикет от чужого
enum TicketOwner {
  MINE
  OTHER
}

model Queue {
  id     String @id @default(uuid())
  number Int    @default(autoincrement())

  officeId  String
  office    Office       @relation(fields: [officeId], references: [id])
  serviceId String
  service   Service      @relation(fields: [serviceId], references: [id])
  ticket    String
  status    TicketStatus @default(PENDING)

  // условное поле для работоспособности концепта
  // в условиях интеграции приложения в экосистему оно будет изменено\пропадёт
  owner TicketOwner

  finishedAt DateTime?
  createdAt  DateTime  @default(now())
}
